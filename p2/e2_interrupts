/**********************************************************************************************
*	Implementar un programa en lenguaje ensamblador NIOS II que implemente un 
*		segundero digital de 1 dígito (0 a 9) en el primer display de 7 segmentos
*		utilizando interrupciones.
***********************************************************************************************/


.text
.global _start
_start:
	/* set up stack pointer */
	movia sp, 0x007FFFFC	/* stack starts from highest memory address in SDRAM */
	movia r16, 0x10002000	/* internal timer base address /*

	/* set the internal timer period */
	movia r12, 0x2FAF080		/* 1/(50 MHZ)x 0x2FAF080 = 1 seg */
	sthio r12, 8(r16)			/* store the low halfword of counter start value */
	srli r12, r12, 16			
	sthio r12, 0xC(r16)			/* high halfword of counter start value */

	/* star interval timer, enable its interrupts */
	movi r15, 0b0111			/* START = 1, CONT = 1, ITO = 1 */
	sthio r15, 4(r16)

	/* write to the pushbutton port interrupt mask register */
	movia r15, 0x10000050		/* pushbutton key base address */
	movi r7, 0b01110
	stwio r7, 8(r15)

		/* Sección inicialización NIOS II interrupts */
	movi r2, 0b1			/* habilitar interrupción IQR_0 => Interval Timer*/
	wrctl ienable, r2		/* se carga en el registro de control de NIOS II */
	movi r2, 1				/* habilitar sistema de interrupciones en procesador */
	wrctl status, r2		/* se carga en el registro de control de NIOS II */

bucle:
	br bucle
	br bucle
	br bucle 
	br bucle


.data								/* data follows */
CONTADOR:
	.word 0x00	
N_bits:
	.word 0x3F, 0x06, 0x5B, 0x4F


.section .reset, "ax"		/* sección reset que se carga a partir de la dirección 0x00000000 */
	movia r2, _start
	jmp r2

.section .exceptions, "ax"	/* sección manejo de interrupciones	*/
.global _manejador_interrupciones
_manejador_interrupciones:
	subi sp, sp, 4			/* guardar et en pila */
	stw et, 0(sp)			
	rdctl et, ctl4			/* leer interrupciones pendientes. ctl4 = ipending */

	beq et, r0, NO_EXT		/* interrupción no externa => finalizar	*/
	subi sp, sp, 4			/* interrp externa => decrementar ea ... */

	/* ... y a continuación guardar registros en la pila */
	subi sp, sp, 12
	stw ea, 0(sp)
	stw ra, 4(sp)
	stw r2, 8(sp)

CHECK_LEVEL_0:
	andi r2, et, 0b01		/* existe interrupción del timer?? */
	beq r2, r0, CHECK_LEVEL_1
	call RUTINAINTERRPUCIONTIMER 

CHECK_LEVEL_1:				/* SIN PROGRAMAR */
	andi r2, et, 0b10		/* existe interrupción del timer?? */
	beq r2, r0, FIN
	/* call RUTINABOTONES */

FIN:
	/* recuperar todos los registros de la pila */
	ldw ea, 0(sp)
	ldw ra, 4(sp)
	ldw r2, 8(sp)

	addi sp, sp, 12
